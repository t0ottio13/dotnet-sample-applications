@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

@* https://learn.microsoft.com/ja-jp/aspnet/core/blazor/tutorials/signalr-blazor?view=aspnetcore-8.0&tabs=visual-studio *@

<PageTitle>Home</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        // 接続を確率
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        // メッセージを受信したときの処理
        // https://learn.microsoft.com/ja-jp/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-net-client#how-to-handle-connection-lifetime-events
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        // 接続開始
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            // メッセージを送信
            // https://learn.microsoft.com/ja-jp/dotnet/api/microsoft.aspnetcore.signalr.client.hubconnectionextensions.sendasync?view=aspnetcore-8.0#microsoft-aspnetcore-signalr-client-hubconnectionextensions-sendasync(microsoft-aspnetcore-signalr-client-hubconnection-system-string-system-object-system-object-system-threading-cancellationtoken)
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    // 接続状態を取得
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    // ページが破棄されるときに呼び出される
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}